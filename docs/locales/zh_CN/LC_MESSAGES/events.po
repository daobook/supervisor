# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022, Agendaless Consulting and Contributors
# This file is distributed under the same license as the Supervisor package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Supervisor 4.3.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-02 04:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../events.rst:4
msgid "Events"
msgstr ""

#: ../../events.rst:6
msgid ""
"Events are an advanced feature of Supervisor introduced in version 3.0.  "
"You don't need to understand events if you simply want to use Supervisor "
"as a mechanism to restart crashed processes or as a system to manually "
"control process state.  You do need to understand events if you want to "
"use Supervisor as part of a process monitoring/notification framework."
msgstr ""

#: ../../events.rst:14
msgid "Event Listeners and Event Notifications"
msgstr ""

#: ../../events.rst:16
msgid ""
"Supervisor provides a way for a specially written program (which it runs "
"as a subprocess) called an \"event listener\" to subscribe to \"event "
"notifications\".  An event notification implies that something happened "
"related to a subprocess controlled by :program:`supervisord` or to "
":program:`supervisord` itself.  Event notifications are grouped into "
"types in order to make it possible for event listeners to subscribe to a "
"limited subset of event notifications.  Supervisor continually emits "
"event notifications as its running even if there are no listeners "
"configured.  If a listener is configured and subscribed to an event type "
"that is emitted during a :program:`supervisord` lifetime, that listener "
"will be notified."
msgstr ""

#: ../../events.rst:28
msgid ""
"The purpose of the event notification/subscription system is to provide a"
" mechanism for arbitrary code to be run (e.g. send an email, make an HTTP"
" request, etc) when some condition is met.  That condition usually has to"
" do with subprocess state.  For instance, you may want to notify someone "
"via email when a process crashes and is restarted by Supervisor."
msgstr ""

#: ../../events.rst:35
msgid ""
"The event notification protocol is based on communication via a "
"subprocess' stdin and stdout.  Supervisor sends specially-formatted input"
" to an event listener process' stdin and expects specially-formatted "
"output from an event listener's stdout, forming a request-response cycle."
"  A protocol agreed upon between supervisor and the listener's "
"implementer allows listeners to process event notifications.  Event "
"listeners can be written in any language supported by the platform you're"
" using to run Supervisor.  Although event listeners may be written in any"
" language, there is special library support for Python in the form of a "
":mod:`supervisor.childutils` module, which makes creating event listeners"
" in Python slightly easier than in other languages."
msgstr ""

#: ../../events.rst:49
msgid "Configuring an Event Listener"
msgstr ""

#: ../../events.rst:51
msgid ""
"A supervisor event listener is specified via a ``[eventlistener:x]`` "
"section in the configuration file.  Supervisor ``[eventlistener:x]`` "
"sections are treated almost exactly like supervisor ``[program:x]`` "
"section with the respect to the keys allowed in their configuration "
"except that Supervisor does not respect \"capture mode\" output from "
"event listener processes (ie. event listeners cannot be "
"``PROCESS_COMMUNICATIONS_EVENT`` event generators).  Therefore it is an "
"error to specify ``stdout_capture_maxbytes`` or "
"``stderr_capture_maxbytes`` in the configuration of an eventlistener. "
"There is no artificial constraint on the number of eventlistener sections"
" that can be placed into the configuration file."
msgstr ""

#: ../../events.rst:63
msgid ""
"When an ``[eventlistener:x]`` section is defined, it actually defines a "
"\"pool\", where the number of event listeners in the pool is determined "
"by the ``numprocs`` value within the section."
msgstr ""

#: ../../events.rst:67
msgid ""
"The ``events`` parameter of the ``[eventlistener:x]`` section specifies "
"the events that will be sent to a listener pool.  A well-written event "
"listener will ignore events that it cannot process, but there is no "
"guarantee that a specific event listener won't crash as a result of "
"receiving an event type it cannot handle.  Therefore, depending on the "
"listener implementation, it may be important to specify in the "
"configuration that it may receive only certain types of events.  The "
"implementor of the event listener is the only person who can tell you "
"what these are (and therefore what value to put in the ``events`` "
"configuration).  Examples of eventlistener configurations that can be "
"placed in ``supervisord.conf`` are as follows."
msgstr ""

#: ../../events.rst:94
msgid ""
"An advanced feature, specifying an alternate \"result handler\" for a "
"pool, can be specified via the ``result_handler`` parameter of an "
"``[eventlistener:x]`` section in the form of a `pkg_resources "
"<http://peak.telecommunity.com/DevCenter/PkgResources>`_ \"entry point\" "
"string.  The default result handler is "
"``supervisord.dispatchers:default_handler``.  Creating an alternate "
"result handler is not currently documented."
msgstr ""

#: ../../events.rst:102
msgid ""
"When an event notification is sent by supervisor, all event listener "
"pools which are subscribed to receive events for the event's type "
"(filtered by the ``events`` value in the eventlistener section) will be "
"found.  One of the listeners in each listener pool will receive the event"
" notification (any \"available\" listener)."
msgstr ""

#: ../../events.rst:108
msgid ""
"Every process in an event listener pool is treated equally by supervisor."
"  If a process in the pool is unavailable (because it is already "
"processing an event, because it has crashed, or because it has elected to"
" removed itself from the pool), supervisor will choose another process "
"from the pool.  If the event cannot be sent because all listeners in the "
"pool are \"busy\", the event will be buffered and notification will be "
"retried later.  \"Later\" is defined as \"the next time that the "
":program:`supervisord` select loop executes\".  For satisfactory event "
"processing performance, you should configure a pool with as many event "
"listener processes as appropriate to handle your event load.  This can "
"only be determined empirically for any given workload, there is no "
"\"magic number\" but to help you determine the optimal number of "
"listeners in a given pool, Supervisor will emit warning messages to its "
"activity log when an event cannot be sent immediately due to pool "
"congestion.  There is no artificial constraint placed on the number of "
"processes that can be in a pool, it is limited only by your platform "
"constraints."
msgstr ""

#: ../../events.rst:126
msgid ""
"A listener pool has an event buffer queue.  The queue is sized via the "
"listener pool's ``buffer_size`` config file option.  If the queue is full"
" and supervisor attempts to buffer an event, supervisor will throw away "
"the oldest event in the buffer and log an error."
msgstr ""

#: ../../events.rst:132
msgid "Writing an Event Listener"
msgstr ""

#: ../../events.rst:134
msgid ""
"An event listener implementation is a program that is willing to accept "
"structured input on its stdin stream and produce structured output on its"
" stdout stream.  An event listener implementation should operate in "
"\"unbuffered\" mode or should flush its stdout every time it needs to "
"communicate back to the supervisord process.  Event listeners can be "
"written to be long-running or may exit after a single request (depending "
"on the implementation and the ``autorestart`` parameter in the "
"eventlistener's configuration)."
msgstr ""

#: ../../events.rst:143
msgid ""
"An event listener can send arbitrary output to its stderr, which will be "
"logged or ignored by supervisord depending on the stderr-related logfile "
"configuration in its ``[eventlistener:x]`` section."
msgstr ""

#: ../../events.rst:148
msgid "Event Notification Protocol"
msgstr ""

#: ../../events.rst:150
msgid ""
"When supervisord sends a notification to an event listener process, the "
"listener will first be sent a single \"header\" line on its stdin. The "
"composition of the line is a set of colon-separated tokens (each of which"
" represents a key-value pair) separated from each other by a single "
"space.  The line is terminated with a ``\\n`` (linefeed) character.  The "
"tokens on the line are not guaranteed to be in any particular order.  The"
" types of tokens currently defined are in the table below."
msgstr ""

#: ../../events.rst:160
msgid "Header Tokens"
msgstr ""

#: ../../events.rst:163
msgid "Key"
msgstr ""

#: ../../events.rst:163 ../../events.rst:219
msgid "Description"
msgstr ""

#: ../../events.rst:163
msgid "Example"
msgstr ""

#: ../../events.rst:165
msgid "ver"
msgstr ""

#: ../../events.rst:165
msgid "The event system protocol version"
msgstr ""

#: ../../events.rst:165
msgid "3.0"
msgstr ""

#: ../../events.rst:166
msgid "server"
msgstr ""

#: ../../events.rst:166
msgid ""
"The identifier of the supervisord sending the event (see config file "
"``[supervisord]`` section ``identifier`` value."
msgstr ""

#: ../../events.rst:169
msgid "serial"
msgstr ""

#: ../../events.rst:169
msgid ""
"An integer assigned to each event.  No two events generated during the "
"lifetime of a :program:`supervisord` process will have the same serial "
"number.  The value is useful for functional testing and detecting event "
"ordering anomalies."
msgstr ""

#: ../../events.rst:169 ../../events.rst:177
msgid "30"
msgstr ""

#: ../../events.rst:175
msgid "pool"
msgstr ""

#: ../../events.rst:175
msgid "The name of the event listener pool which generated this event."
msgstr ""

#: ../../events.rst:175
msgid "myeventpool"
msgstr ""

#: ../../events.rst:177
msgid "poolserial"
msgstr ""

#: ../../events.rst:177
msgid ""
"An integer assigned to each event by the eventlistener pool which it is "
"being sent from.  No two events generated by the same eventlister pool "
"during the lifetime of a :program:`supervisord` process will have the "
"same ``poolserial`` number.  This value can be used to detect event "
"ordering anomalies."
msgstr ""

#: ../../events.rst:184
msgid "eventname"
msgstr ""

#: ../../events.rst:184
msgid "The specific event type name (see :ref:`event_types`)"
msgstr ""

#: ../../events.rst:184
msgid "TICK_5"
msgstr ""

#: ../../events.rst:186
msgid "len"
msgstr ""

#: ../../events.rst:186
msgid ""
"An integer indicating the number of bytes in the event payload, aka the "
"``PAYLOAD_LENGTH``"
msgstr ""

#: ../../events.rst:186
msgid "22"
msgstr ""

#: ../../events.rst:190
msgid "An example of a complete header line is as follows."
msgstr ""

#: ../../events.rst:196
msgid ""
"Directly following the linefeed character in the header is the event "
"payload.  It consists of ``PAYLOAD_LENGTH`` bytes representing a "
"serialization of the event data.  See :ref:`event_types` for the specific"
" event data serialization definitions."
msgstr ""

#: ../../events.rst:201
msgid ""
"An example payload for a ``PROCESS_COMMUNICATION_STDOUT`` event "
"notification is as follows."
msgstr ""

#: ../../events.rst:209
msgid ""
"The payload structure of any given event is determined only by the "
"event's type."
msgstr ""

#: ../../events.rst:213
msgid "Event Listener States"
msgstr ""

#: ../../events.rst:215
msgid ""
"An event listener process has three possible states that are maintained "
"by supervisord:"
msgstr ""

#: ../../events.rst:219
msgid "Name"
msgstr ""

#: ../../events.rst:221
msgid "ACKNOWLEDGED"
msgstr ""

#: ../../events.rst:221
msgid "The event listener has acknowledged (accepted or rejected) an event send."
msgstr ""

#: ../../events.rst:223
msgid "READY"
msgstr ""

#: ../../events.rst:223
msgid "Event notifications may be sent to this event listener"
msgstr ""

#: ../../events.rst:225
msgid "BUSY"
msgstr ""

#: ../../events.rst:225
msgid "Event notifications may not be sent to this event listener."
msgstr ""

#: ../../events.rst:229
msgid ""
"When an event listener process first starts, supervisor automatically "
"places it into the ``ACKNOWLEDGED`` state to allow for startup activities"
" or guard against startup failures (hangs).  Until the listener sends a "
"``READY\\n`` string to its stdout, it will stay in this state."
msgstr ""

#: ../../events.rst:235
msgid ""
"When supervisor sends an event notification to a listener in the "
"``READY`` state, the listener will be placed into the ``BUSY`` state "
"until it receives an ``OK`` or ``FAIL`` response from the listener, at "
"which time, the listener will be transitioned back into the "
"``ACKNOWLEDGED`` state."
msgstr ""

#: ../../events.rst:242
msgid "Event Listener Notification Protocol"
msgstr ""

#: ../../events.rst:244
msgid ""
"Supervisor will notify an event listener in the ``READY`` state of an "
"event by sending data to the stdin of the process.  Supervisor will never"
" send anything to the stdin of an event listener process while that "
"process is in the ``BUSY`` or ``ACKNOWLEDGED`` state.  Supervisor starts "
"by sending the header."
msgstr ""

#: ../../events.rst:250
msgid ""
"Once it has processed the header, the event listener implementation "
"should read ``PAYLOAD_LENGTH`` bytes from its stdin, perform an arbitrary"
" action based on the values in the header and the data parsed out of the "
"serialization.  It is free to block for an arbitrary amount of time while"
" doing this.  Supervisor will continue processing normally as it waits "
"for a response and it will send other events of the same type to other "
"listener processes in the same pool as necessary."
msgstr ""

#: ../../events.rst:259
msgid ""
"After the event listener has processed the event serialization, in order "
"to notify supervisord about the result, it should send back a result "
"structure on its stdout.  A result structure is the word \"RESULT\", "
"followed by a space, followed by the result length, followed by a line "
"feed, followed by the result content.  For example, ``RESULT 2\\nOK`` is "
"the result \"OK\".  Conventionally, an event listener will use either "
"``OK`` or ``FAIL`` as the result content. These strings have special "
"meaning to the default result handler."
msgstr ""

#: ../../events.rst:268
msgid ""
"If the default result handler receives ``OK`` as result content, it will "
"assume that the listener processed the event notification successfully.  "
"If it receives ``FAIL``, it will assume that the listener has failed to "
"process the event, and the event will be rebuffered and sent again at a "
"later time.  The event listener may reject the event for any reason by "
"returning a ``FAIL`` result.  This does not indicate a problem with the "
"event data or the event listener. Once an ``OK`` or ``FAIL`` result is "
"received by supervisord, the event listener is placed into the "
"``ACKNOWLEDGED`` state."
msgstr ""

#: ../../events.rst:278
msgid ""
"Once the listener is in the ``ACKNOWLEDGED`` state, it may either exit "
"(and subsequently may be restarted by supervisor if its ``autorestart`` "
"config parameter is ``true``), or it may continue running.  If it "
"continues to run, in order to be placed back into the ``READY`` state by "
"supervisord, it must send a ``READY`` token followed immediately by a "
"line feed to its stdout."
msgstr ""

#: ../../events.rst:286
msgid "Example Event Listener Implementation"
msgstr ""

#: ../../events.rst:288
msgid ""
"A Python implementation of a \"long-running\" event listener which "
"accepts an event notification, prints the header and payload to its "
"stderr, and responds with an ``OK`` result, and then subsequently a "
"``READY`` is as follows."
msgstr ""

#: ../../events.rst:326
msgid ""
"Other sample event listeners are present within the :term:`Superlance` "
"package, including one which can monitor supervisor subprocesses and "
"restart a process if it is using \"too much\" memory."
msgstr ""

#: ../../events.rst:331
msgid "Event Listener Error Conditions"
msgstr ""

#: ../../events.rst:333
msgid ""
"If the event listener process dies while the event is being transmitted "
"to its stdin, or if it dies before sending an result structure back to "
"supervisord, the event is assumed to not be processed and will be "
"rebuffered by supervisord and sent again later."
msgstr ""

#: ../../events.rst:338
msgid ""
"If an event listener sends data to its stdout which supervisor does not "
"recognize as an appropriate response based on the state that the event "
"listener is in, the event listener will be placed into the ``UNKNOWN`` "
"state, and no further event notifications will be sent to it.  If an "
"event was being processed by the listener during this time, it will be "
"rebuffered and sent again later."
msgstr ""

#: ../../events.rst:346
msgid "Miscellaneous"
msgstr ""

#: ../../events.rst:348
msgid ""
"Event listeners may use the Supervisor XML-RPC interface to call \"back "
"in\" to Supervisor.  As such, event listeners can impact the state of a "
"Supervisor subprocess as a result of receiving an event notification. For"
" example, you may want to generate an event every few minutes related to "
"process usage of Supervisor-controlled subprocesses, and if any of those "
"processes exceed some memory threshold, you would like to restart it.  "
"You would write a program that caused supervisor to generate "
"``PROCESS_COMMUNICATION`` events every so often with memory information "
"in them, and an event listener to perform an action based on processing "
"the data it receives from these events."
msgstr ""

#: ../../events.rst:362
msgid "Event Types"
msgstr ""

#: ../../events.rst:364
msgid ""
"The event types are a controlled set, defined by Supervisor itself. There"
" is no way to add an event type without changing :program:`supervisord` "
"itself.  This is typically not a problem, though, because metadata is "
"attached to events that can be used by event listeners as additional "
"filter criterion, in conjunction with its type."
msgstr ""

#: ../../events.rst:371
msgid ""
"Event types that may be subscribed to by event listeners are predefined "
"by supervisor and fall into several major categories, including \"process"
" state change\", \"process communication\", and \"supervisor state "
"change\" events. Below are tables describing these event types."
msgstr ""

#: ../../events.rst:377
msgid ""
"In the below list, we indicate that some event types have a \"body\" "
"which is a a *token set*.  A token set consists of a set of charaters "
"with space-separated tokens.  Each token represents a key-value pair. The"
" key and value are separated by a colon.  For example:"
msgstr ""

#: ../../events.rst:386
msgid ""
"Token sets do not have a linefeed or carriage return character at their "
"end."
msgstr ""

#: ../../events.rst:390
msgid "``EVENT`` Event Type"
msgstr ""

#: ../../events.rst:392
msgid ""
"The base event type.  This event type is abstract.  It will never be sent"
" directly.  Subscribing to this event type will cause a subscriber to "
"receive all event notifications emitted by Supervisor."
msgstr ""

#: ../../events.rst:396
msgid "*Name*: ``EVENT``"
msgstr ""

#: ../../events.rst:398
msgid "*Subtype Of*: N/A"
msgstr ""

#: ../../events.rst:400 ../../events.rst:644 ../../events.rst:700
#: ../../events.rst:751 ../../events.rst:794 ../../events.rst:869
msgid "*Body Description*: N/A"
msgstr ""

#: ../../events.rst:404
msgid "``PROCESS_STATE`` Event Type"
msgstr ""

#: ../../events.rst:406
msgid ""
"This process type indicates a process has moved from one state to "
"another.  See :ref:`process_states` for a description of the states that "
"a process moves through during its lifetime.  This event type is "
"abstract, it will never be sent directly.  Subscribing to this event type"
" will cause a subscriber to receive event notifications of all the event "
"types that are subtypes of ``PROCESS_STATE``."
msgstr ""

#: ../../events.rst:413
msgid "*Name*: ``PROCESS_STATE``"
msgstr ""

#: ../../events.rst:415 ../../events.rst:619 ../../events.rst:642
#: ../../events.rst:698 ../../events.rst:749 ../../events.rst:792
#: ../../events.rst:867
msgid "*Subtype Of*: ``EVENT``"
msgstr ""

#: ../../events.rst:418 ../../events.rst:441 ../../events.rst:465
#: ../../events.rst:488 ../../events.rst:511 ../../events.rst:532
#: ../../events.rst:556 ../../events.rst:579 ../../events.rst:601
#: ../../events.rst:622 ../../events.rst:659 ../../events.rst:679
#: ../../events.rst:713 ../../events.rst:731 ../../events.rst:807
#: ../../events.rst:827 ../../events.rst:847
msgid "Body Description"
msgstr ""

#: ../../events.rst:420
msgid ""
"All subtypes of ``PROCESS_STATE`` have a body which is a token set. "
"Additionally, each ``PROCESS_STATE`` subtype's token set has a default "
"set of key/value pairs: ``processname``, ``groupname``, and "
"``from_state``.  ``processname`` represents the process name which "
"supervisor knows this process as. ``groupname`` represents the name of "
"the supervisord group which this process is in.  ``from_state`` is the "
"name of the state from which this process is transitioning (the new state"
" is implied by the concrete event type).  Concrete subtypes may include "
"additional key/value pairs in the token set."
msgstr ""

#: ../../events.rst:431
msgid "``PROCESS_STATE_STARTING`` Event Type"
msgstr ""

#: ../../events.rst:434
msgid "Indicates a process has moved from a state to the STARTING state."
msgstr ""

#: ../../events.rst:436
msgid "*Name*: ``PROCESS_STATE_STARTING``"
msgstr ""

#: ../../events.rst:438 ../../events.rst:462 ../../events.rst:485
#: ../../events.rst:508 ../../events.rst:529 ../../events.rst:553
#: ../../events.rst:576 ../../events.rst:598
msgid "*Subtype Of*: ``PROCESS_STATE``"
msgstr ""

#: ../../events.rst:443
msgid ""
"This body is a token set.  It has the default set of key/value pairs plus"
" an additional ``tries`` key.  ``tries`` represents the number of times "
"this process has entered this state before transitioning to RUNNING or "
"FATAL (it will never be larger than the \"startretries\" parameter of the"
" process).  For example:"
msgstr ""

#: ../../events.rst:454
msgid "``PROCESS_STATE_RUNNING`` Event Type"
msgstr ""

#: ../../events.rst:456
msgid ""
"Indicates a process has moved from the ``STARTING`` state to the "
"``RUNNING`` state.  This means that the process has successfully started "
"as far as Supervisor is concerned."
msgstr ""

#: ../../events.rst:460
msgid "*Name*: ``PROCESS_STATE_RUNNING``"
msgstr ""

#: ../../events.rst:467 ../../events.rst:513 ../../events.rst:558
msgid ""
"This body is a token set.  It has the default set of key/value pairs plus"
" an additional ``pid`` key.  ``pid`` represents the UNIX process id of "
"the process that was started.  For example:"
msgstr ""

#: ../../events.rst:476
msgid "``PROCESS_STATE_BACKOFF`` Event Type"
msgstr ""

#: ../../events.rst:478
msgid ""
"Indicates a process has moved from the ``STARTING`` state to the "
"``BACKOFF`` state.  This means that the process did not successfully "
"enter the RUNNING state, and Supervisor is going to try to restart it "
"unless it has exceeded its \"startretries\" configuration limit."
msgstr ""

#: ../../events.rst:483
msgid "*Name*: ``PROCESS_STATE_BACKOFF``"
msgstr ""

#: ../../events.rst:490
msgid ""
"This body is a token set.  It has the default set of key/value pairs plus"
" an additional ``tries`` key.  ``tries`` represents the number of times "
"this process has entered this state before transitioning to ``RUNNING`` "
"or ``FATAL`` (it will never be larger than the \"startretries\" parameter"
" of the process).  For example:"
msgstr ""

#: ../../events.rst:501
msgid "``PROCESS_STATE_STOPPING`` Event Type"
msgstr ""

#: ../../events.rst:503
msgid ""
"Indicates a process has moved from either the ``RUNNING`` state or the "
"``STARTING`` state to the ``STOPPING`` state."
msgstr ""

#: ../../events.rst:506
msgid "*Name*: ``PROCESS_STATE_STOPPING``"
msgstr ""

#: ../../events.rst:522
msgid "``PROCESS_STATE_EXITED`` Event Type"
msgstr ""

#: ../../events.rst:524
msgid ""
"Indicates a process has moved from the ``RUNNING`` state to the "
"``EXITED`` state."
msgstr ""

#: ../../events.rst:527
msgid "*Name*: ``PROCESS_STATE_EXITED``"
msgstr ""

#: ../../events.rst:534
msgid ""
"This body is a token set.  It has the default set of key/value pairs plus"
" two additional keys: ``pid`` and ``expected``.  ``pid`` represents the "
"UNIX process id of the process that exited. ``expected`` represents "
"whether the process exited with an expected exit code or not.  It will be"
" ``0`` if the exit code was unexpected, or ``1`` if the exit code was "
"expected. For example:"
msgstr ""

#: ../../events.rst:546
msgid "``PROCESS_STATE_STOPPED`` Event Type"
msgstr ""

#: ../../events.rst:548
msgid ""
"Indicates a process has moved from the ``STOPPING`` state to the "
"``STOPPED`` state."
msgstr ""

#: ../../events.rst:551
msgid "*Name*: ``PROCESS_STATE_STOPPED``"
msgstr ""

#: ../../events.rst:567
msgid "``PROCESS_STATE_FATAL`` Event Type"
msgstr ""

#: ../../events.rst:569
msgid ""
"Indicates a process has moved from the ``BACKOFF`` state to the ``FATAL``"
" state.  This means that Supervisor tried ``startretries`` number of "
"times unsuccessfully to start the process, and gave up attempting to "
"restart it."
msgstr ""

#: ../../events.rst:574
msgid "*Name*: ``PROCESS_STATE_FATAL``"
msgstr ""

#: ../../events.rst:581 ../../events.rst:603
msgid ""
"This event type is a token set with the default key/value pairs.  For "
"example:"
msgstr ""

#: ../../events.rst:589
msgid "``PROCESS_STATE_UNKNOWN`` Event Type"
msgstr ""

#: ../../events.rst:591
msgid ""
"Indicates a process has moved from any state to the ``UNKNOWN`` state "
"(indicates an error in :program:`supervisord`).  This state transition "
"will only happen if :program:`supervisord` itself has a programming "
"error."
msgstr ""

#: ../../events.rst:596
msgid "*Name*: ``PROCESS_STATE_UNKNOWN``"
msgstr ""

#: ../../events.rst:611
msgid "``REMOTE_COMMUNICATION`` Event Type"
msgstr ""

#: ../../events.rst:613
msgid ""
"An event type raised when the ``supervisor.sendRemoteCommEvent()`` method"
" is called on Supervisor's RPC interface.  The ``type`` and ``data`` are "
"arguments of the RPC method."
msgstr ""

#: ../../events.rst:617
msgid "*Name*: ``REMOTE_COMMUNICATION``"
msgstr ""

#: ../../events.rst:630
msgid "``PROCESS_LOG`` Event Type"
msgstr ""

#: ../../events.rst:632
msgid ""
"An event type emitted when a process writes to stdout or stderr.  The "
"event will only be emitted if the file descriptor is not in capture mode "
"and if ``stdout_events_enabled`` or ``stderr_events_enabled`` config "
"options are set to ``true``.  This event type is abstract, it will never "
"be sent directly.  Subscribing to this event type will cause a subscriber"
" to receive event notifications for all subtypes of ``PROCESS_LOG``."
msgstr ""

#: ../../events.rst:640
msgid "*Name*: ``PROCESS_LOG``"
msgstr ""

#: ../../events.rst:647
msgid "``PROCESS_LOG_STDOUT`` Event Type"
msgstr ""

#: ../../events.rst:649
msgid ""
"Indicates a process has written to its stdout file descriptor.  The event"
" will only be emitted if the file descriptor is not in capture mode and "
"if the ``stdout_events_enabled`` config option is set to ``true``."
msgstr ""

#: ../../events.rst:654
msgid "*Name*: ``PROCESS_LOG_STDOUT``"
msgstr ""

#: ../../events.rst:656 ../../events.rst:676
msgid "*Subtype Of*: ``PROCESS_LOG``"
msgstr ""

#: ../../events.rst:667
msgid "``PROCESS_LOG_STDERR`` Event Type"
msgstr ""

#: ../../events.rst:669
msgid ""
"Indicates a process has written to its stderr file descriptor.  The event"
" will only be emitted if the file descriptor is not in capture mode and "
"if the ``stderr_events_enabled`` config option is set to ``true``."
msgstr ""

#: ../../events.rst:674
msgid "*Name*: ``PROCESS_LOG_STDERR``"
msgstr ""

#: ../../events.rst:687
msgid "``PROCESS_COMMUNICATION`` Event Type"
msgstr ""

#: ../../events.rst:689
msgid ""
"An event type raised when any process attempts to send information "
"between ``<!--XSUPERVISOR:BEGIN-->`` and ``<!--XSUPERVISOR:END-->`` tags "
"in its output.  This event type is abstract, it will never be sent "
"directly.  Subscribing to this event type will cause a subscriber to "
"receive event notifications for all subtypes of "
"``PROCESS_COMMUNICATION``."
msgstr ""

#: ../../events.rst:696
msgid "*Name*: ``PROCESS_COMMUNICATION``"
msgstr ""

#: ../../events.rst:703
msgid "``PROCESS_COMMUNICATION_STDOUT`` Event Type"
msgstr ""

#: ../../events.rst:705
msgid ""
"Indicates a process has sent a message to Supervisor on its stdout file "
"descriptor."
msgstr ""

#: ../../events.rst:708
msgid "*Name*: ``PROCESS_COMMUNICATION_STDOUT``"
msgstr ""

#: ../../events.rst:710 ../../events.rst:728
msgid "*Subtype Of*: ``PROCESS_COMMUNICATION``"
msgstr ""

#: ../../events.rst:721
msgid "``PROCESS_COMMUNICATION_STDERR`` Event Type"
msgstr ""

#: ../../events.rst:723
msgid ""
"Indicates a process has sent a message to Supervisor on its stderr file "
"descriptor."
msgstr ""

#: ../../events.rst:726
msgid "*Name*: ``PROCESS_COMMUNICATION_STDERR``"
msgstr ""

#: ../../events.rst:739
msgid "``SUPERVISOR_STATE_CHANGE`` Event Type"
msgstr ""

#: ../../events.rst:741
msgid ""
"An event type raised when the state of the :program:`supervisord` process"
" changes.  This type is abstract, it will never be sent directly.  "
"Subscribing to this event type will cause a subscriber to receive event "
"notifications of all the subtypes of ``SUPERVISOR_STATE_CHANGE``."
msgstr ""

#: ../../events.rst:747
msgid "*Name*: ``SUPERVISOR_STATE_CHANGE``"
msgstr ""

#: ../../events.rst:754
msgid "``SUPERVISOR_STATE_CHANGE_RUNNING`` Event Type"
msgstr ""

#: ../../events.rst:756
msgid "Indicates that :program:`supervisord` has started."
msgstr ""

#: ../../events.rst:758
msgid "*Name*: ``SUPERVISOR_STATE_CHANGE_RUNNING``"
msgstr ""

#: ../../events.rst:760 ../../events.rst:771
msgid "*Subtype Of*: ``SUPERVISOR_STATE_CHANGE``"
msgstr ""

#: ../../events.rst:762 ../../events.rst:773
msgid "*Body Description*: Empty string"
msgstr ""

#: ../../events.rst:765
msgid "``SUPERVISOR_STATE_CHANGE_STOPPING`` Event Type"
msgstr ""

#: ../../events.rst:767
msgid "Indicates that :program:`supervisord` is stopping."
msgstr ""

#: ../../events.rst:769
msgid "*Name*: ``SUPERVISOR_STATE_CHANGE_STOPPING``"
msgstr ""

#: ../../events.rst:776
msgid "``TICK`` Event Type"
msgstr ""

#: ../../events.rst:778
msgid ""
"An event type that may be subscribed to for event listeners to receive "
"\"wake-up\" notifications every N seconds.  This event type is abstract, "
"it will never be sent directly.  Subscribing to this event type will "
"cause a subscriber to receive event notifications for all subtypes of "
"``TICK``."
msgstr ""

#: ../../events.rst:784
msgid ""
"Note that the only ``TICK`` events available are the ones listed below. "
"You cannot subscribe to an arbitrary ``TICK`` interval. If you need an "
"interval not provided below, you can subscribe to one of the shorter "
"intervals given below and keep track of the time between runs in your "
"event listener."
msgstr ""

#: ../../events.rst:790
msgid "*Name*: ``TICK``"
msgstr ""

#: ../../events.rst:797
msgid "``TICK_5`` Event Type"
msgstr ""

#: ../../events.rst:799
msgid ""
"An event type that may be subscribed to for event listeners to receive "
"\"wake-up\" notifications every 5 seconds."
msgstr ""

#: ../../events.rst:802
msgid "*Name*: ``TICK_5``"
msgstr ""

#: ../../events.rst:804 ../../events.rst:824 ../../events.rst:844
msgid "*Subtype Of*: ``TICK``"
msgstr ""

#: ../../events.rst:809 ../../events.rst:829 ../../events.rst:849
msgid ""
"This event type is a token set with a single key: \"when\", which "
"indicates the epoch time for which the tick was sent."
msgstr ""

#: ../../events.rst:817
msgid "``TICK_60`` Event Type"
msgstr ""

#: ../../events.rst:819
msgid ""
"An event type that may be subscribed to for event listeners to receive "
"\"wake-up\" notifications every 60 seconds."
msgstr ""

#: ../../events.rst:822
msgid "*Name*: ``TICK_60``"
msgstr ""

#: ../../events.rst:837
msgid "``TICK_3600`` Event Type"
msgstr ""

#: ../../events.rst:839
msgid ""
"An event type that may be subscribed to for event listeners to receive "
"\"wake-up\" notifications every 3600 seconds (1 hour)."
msgstr ""

#: ../../events.rst:842
msgid "*Name*: ``TICK_3600``"
msgstr ""

#: ../../events.rst:857
msgid "``PROCESS_GROUP`` Event Type"
msgstr ""

#: ../../events.rst:859
msgid ""
"An event type raised when a process group is added to or removed from "
"Supervisor.  This type is abstract, it will never be sent directly.  "
"Subscribing to this event type will cause a subscriber to receive event "
"notifications of all the subtypes of ``PROCESS_GROUP``."
msgstr ""

#: ../../events.rst:865
msgid "*Name*: ``PROCESS_GROUP``"
msgstr ""

#: ../../events.rst:872
msgid "``PROCESS_GROUP_ADDED`` Event Type"
msgstr ""

#: ../../events.rst:874
msgid ""
"Indicates that a process group has been added to Supervisor's "
"configuration."
msgstr ""

#: ../../events.rst:876
msgid "*Name*: ``PROCESS_GROUP_ADDED``"
msgstr ""

#: ../../events.rst:878 ../../events.rst:893
msgid "*Subtype Of*: ``PROCESS_GROUP``"
msgstr ""

#: ../../events.rst:880 ../../events.rst:895
msgid ""
"*Body Description*: This body is a token set with just a groupname "
"key/value."
msgstr ""

#: ../../events.rst:887
msgid "``PROCESS_GROUP_REMOVED`` Event Type"
msgstr ""

#: ../../events.rst:889
msgid ""
"Indicates that a process group has been removed from Supervisor's "
"configuration."
msgstr ""

#: ../../events.rst:891
msgid "*Name*: ``PROCESS_GROUP_REMOVED``"
msgstr ""

